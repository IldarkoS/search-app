version: '3.9'

services:

  # ────────────────────────────────────────────── #
  # API Gateway
  api-service:
    build: ../../api-service
    container_name: api-service
    ports:
      - "8000:8000"
    volumes:
      - ../../api-service:/app
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - kafka
      - minio
      - postgres
    networks:
      - semantic-network
    env_file:
      - ../../.env

  # ────────────────────────────────────────────── #
  processor-service:
    build: ../../processor-service
    container_name: processor-service
    depends_on:
      - kafka
      - minio
      - qdrant
      - postgres
    networks:
      - semantic-network
    env_file:
      - ../../.env
    restart: always

  # ────────────────────────────────────────────── #
  search-service:
    build: ../../search-service
    container_name: search-service
    ports:
      - "8002:8000"
    depends_on:
      - qdrant
      - postgres
    networks:
      - semantic-network
    env_file:
      - ../../.env

  # ────────────────────────────────────────────── #
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: documents
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - semantic-network
    env_file:
      - ../../.env

  # ────────────────────────────────────────────── #
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: always
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - semantic-network
    env_file:
      - ../../.env

  # ────────────────────────────────────────────── #
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    networks:
      - semantic-network
    env_file:
      - ../../.env

  # ────────────────────────────────────────────── #
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - semantic-network
    env_file:
      - ../../.env

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - semantic-network
    env_file:
      - ../../.env

  # ────────────────────────────────────────────── #
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - semantic-network
    env_file:
      - ../../.env

# ────────────────────────────────────────────── #
volumes:
  postgres-data:
  minio-data:
  qdrant-data:

networks:
  semantic-network:
    driver: bridge
